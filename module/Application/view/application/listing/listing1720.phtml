<?php 
/**
 * ZF2 Buch Kapitel 17
 * 
 * Das Buch "Zend Framework 2 - Das Praxisbuch"
 * von Ralf Eggert ist im Galileo-Computing Verlag erschienen. 
 * ISBN 978-3-8362-2610-3
 * 
 * @package    Application
 * @author     Ralf Eggert <r.eggert@travello.de>
 * @copyright  Alle Listings sind urheberrechtlich geschützt!
 * @link       http://www.zendframeworkbuch.de/ und http://www.galileocomputing.de/3460
 */

/**
 * Listing 17.20 view script
 * 
 * @package    Application
 */

$this->headTitle('Listing 17.20');
$this->pageTitle('Listing 17.20');
?>
<h3><code>UserListener</code> zum Überprüfen der Benutzerrechte</h3>
<pre>
&lt;?php
namespace User\Listener;

use Zend\EventManager\EventInterface;
use Zend\EventManager\EventManagerInterface;
use Zend\EventManager\ListenerAggregateInterface;
use User\Acl\Service as AclService;
use Zend\Mvc\MvcEvent;

class UserListener implements ListenerAggregateInterface
{
  protected $listeners = array();

  public function attach(EventManagerInterface $events)
  {
        $this->listeners[] = $events->attach(
            MvcEvent::EVENT_DISPATCH, array($this, 'checkAcl'), 100
        );
        $this->listeners[] = $events->attach(
            MvcEvent::EVENT_RENDER, array($this, 'addAclToNavigation'), -100
        );
    }

    public function detach(EventManagerInterface $events)
    {
        foreach ($this->listeners as $index => $listener) {
            if ($events->detach($listener)) {
                unset($this->listeners[$index]);
            }
        }
    }

    public function checkAcl(EventInterface $e)
    {
        $routeMatch       = $e->getRouteMatch();
        $controllerParam  = $routeMatch->getParam('controller');
        $actionParam      = $routeMatch->getParam('action');
        $serviceManager   = $e->getApplication()->getServiceManager();
        $controllerLoader = $serviceManager->get('ControllerLoader');
        $acl              = $serviceManager->get('User\Acl\Service');
        
        try {
            $controller = $controllerLoader->get($controllerParam);
        } catch (\Exception $exception) {
            return;
        }
        
        if (!$acl->isAllowed($controllerParam, $actionParam)) {
            if ($acl->getRole() == 'guest') {
                $routeMatch->setParam('controller', 'user');
                $routeMatch->setParam('action', 'login');
            } else {
                $routeMatch->setParam('controller', 'user');
                $routeMatch->setParam('action', 'forbidden');
            }
        }
    }

    public function addAclToNavigation(EventInterface $e)
    {
        // get service manager, view manager and acl service
        $serviceManager = $e->getApplication()->getServiceManager();
        $viewManager    = $serviceManager->get('viewmanager');
        $aclService     = $serviceManager->get('User\Acl\Service');
        
        // set navigation plugin and set acl and role
        $plugin = $viewManager->getRenderer()->plugin('navigation');
        $plugin->setRole($aclService->getRole());
        $plugin->setAcl($aclService->getAcl());
    }
}
</pre>
